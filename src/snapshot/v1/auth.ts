/**
 * This code was generated by a tool.
 * @basketry/typescript-auth@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 */

export interface AuthService {
  isAuthenticated(scheme: string): boolean;
  hasScope(scope: string): boolean;
}
export type AuthResponse = 'authorized' | 'unauthenticated' | 'unauthorized';

export function authorizeGetGizmos(context: AuthService): AuthResponse {
  if (!context.isAuthenticated('oauth2Auth')) {
    return 'unauthenticated';
  }
  if (!context.hasScope('read:gizmos')) {
    return 'unauthorized';
  }
  return 'authorized';
}

export function authorizeCreateGizmo(context: AuthService): AuthResponse {
  if (!context.isAuthenticated('oauth2Auth')) {
    return 'unauthenticated';
  }
  if (!context.hasScope('write:gizmos')) {
    return 'unauthorized';
  }
  return 'authorized';
}

export function authorizeUpdateGizmo(context: AuthService): AuthResponse {
  if (!context.isAuthenticated('oauth2Auth')) {
    return 'unauthenticated';
  }
  if (!context.hasScope('write:gizmos') || !context.hasScope('admin:gizmos')) {
    return 'unauthorized';
  }
  return 'authorized';
}

export function authorizeGetWidgets(context: AuthService): AuthResponse {
  if (!context.isAuthenticated('apiKeyAuth')) {
    return 'unauthenticated';
  }
  return 'authorized';
}

export function authorizeCreateWidget(context: AuthService): AuthResponse {
  if (!context.isAuthenticated('apiKeyAuth')) {
    return 'unauthenticated';
  }
  return 'authorized';
}

export function authorizePutWidget(context: AuthService): AuthResponse {
  if (!context.isAuthenticated('apiKeyAuth')) {
    return 'unauthenticated';
  }
  return 'authorized';
}

export function authorizeGetWidgetFoo(context: AuthService): AuthResponse {
  if (!context.isAuthenticated('apiKeyAuth')) {
    return 'unauthenticated';
  }
  return 'authorized';
}

export function authorizeDeleteWidgetFoo(context: AuthService): AuthResponse {
  if (!context.isAuthenticated('apiKeyAuth')) {
    return 'unauthenticated';
  }
  return 'authorized';
}

export function authorizeExhaustiveParams(_context: AuthService): AuthResponse {
  return 'authorized';
}
